name: Build & Deploy Tasky

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy-tasky:
    name: Build & Deploy Tasky
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & tag Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          # build from the docker/tasky-main directory
          docker build \
            -f docker/tasky-main/Dockerfile \
            -t tasky-app:$IMAGE_TAG \
            docker/tasky-main

          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO_NAME=${{ secrets.ECR_REPO }}
          docker tag tasky-app:$IMAGE_TAG \
            $REGISTRY/$REPO_NAME:$IMAGE_TAG

      - name: Push to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO_NAME=${{ secrets.ECR_REPO }}
          docker push $REGISTRY/$REPO_NAME:$IMAGE_TAG

      - name: Configure kubectl for EKS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ secrets.EKS_CLUSTER }}" \
            --region "${{ secrets.AWS_DEFAULT_REGION }}"
          
      - name: Update Kubernetes Deployment Image
        run: |
          aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER }} --region ${{ secrets.AWS_DEFAULT_REGION }}
          kubectl apply -f k8s/alb-sa.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl apply -f k8s/admin-binding.yaml

      - name: Validate wizexercise.txt
        run: |
          POD=$(kubectl get pods -l app=tasky -o jsonpath="{.items[0].metadata.name}")
          CONTAINERS=$(kubectl get pod $POD -o jsonpath="{.spec.containers[*].name}")
          for c in $CONTAINERS; do
            if [[ "$c" == *tasky* ]]; then
              CONTAINER="$c"
              break
            fi
          done
          echo "Found container: $CONTAINER"
          kubectl exec -c "$CONTAINER" "$POD" -- cat /wizexercise.txt