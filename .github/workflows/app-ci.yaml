name: Build & Deploy Tasky

on:
  push:
    branches: ["main"]

jobs:
  build-and-deploy-tasky:
    name: Build & Deploy Tasky
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build & tag Docker image
        run: |
          IMAGE_TAG=${{ github.sha }}
          # build from the docker/tasky-main directory
          docker build \
            -f docker/tasky-main/Dockerfile \
            -t tasky-app:$IMAGE_TAG \
            docker/tasky-main

          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO_NAME=${{ secrets.ECR_REPO }}
          docker tag tasky-app:$IMAGE_TAG \
            $REGISTRY/$REPO_NAME:$IMAGE_TAG

      - name: Push to ECR
        run: |
          IMAGE_TAG=${{ github.sha }}
          REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPO_NAME=${{ secrets.ECR_REPO }}
          docker push $REGISTRY/$REPO_NAME:$IMAGE_TAG

      - name: Configure kubectl for EKS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig \
            --name "${{ secrets.EKS_CLUSTER }}" \
            --region "${{ secrets.AWS_DEFAULT_REGION }}"

      - name: Bootstrap ALB Service Account
        run: kubectl apply -f k8s/alb-sa.yaml

      - name: Deploy to EKS
        env:
          EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }} 
          AWS_REGION: us-west-2
        run: |
          aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_REGION
          
          kubectl apply -f k8s/app.yaml -f k8s/ingress.yaml
          
      - name: Update Kubernetes Deployment Image
        env:
          EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
          AWS_REGION:  ${{ secrets.AWS_DEFAULT_REGION }}
          IMAGE_TAG:   ${{ github.sha }}
          REGISTRY:    ${{ steps.login-ecr.outputs.registry }}
          REPO_NAME:   ${{ secrets.ECR_REPO }}
          FULL_IMAGE:  ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPO }}:${{ github.sha }}
        run: |
          set -xe
          aws eks update-kubeconfig --name "$EKS_CLUSTER" --region "$AWS_REGION"
          kubectl set image deployment/tasky tasky="$FULL_IMAGE" -n default

          echo "=== POST-PATCH: RS & POD SUMMARY ==="
          kubectl get rs -l app=tasky -n default -o wide
          kubectl get pods -l app=tasky -n default -o wide

          echo "=== DEBUG: Describe each non-Ready Pod ==="
          for pod in $(kubectl get pods -l app=tasky -n default \
                      -o jsonpath='{.items[?(@.status.phase!="Running")].metadata.name}'); do
            echo "--- describe pod $pod ---"
            kubectl describe pod "$pod" -n default
            echo "--- pod events for $pod ---"
            kubectl get events -n default --field-selector involvedObject.name="$pod" \
              --sort-by='.metadata.creationTimestamp'
          done

          echo "=== DEBUG: Describe Deployment ==="
          kubectl describe deployment tasky -n default

          echo "=== POD LOGS (last 50 lines) ==="
          for pod in $(kubectl get pods -l app=tasky -n default -o jsonpath='{.items[*].metadata.name}'); do
            echo "--- logs for $pod ---"
            kubectl logs "$pod" -n default --all-containers --tail=50 || true
          done

          kubectl rollout status deployment/tasky -n default --timeout=2m